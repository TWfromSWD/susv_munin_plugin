#!/usr/bin/python

#%# capabilites=suggest
#%# capabilities=autoconf
#%# family=auto

import sys, getopt
import subprocess
import os.path
import re


def main(argv):

  # susv client executable
  susv_executable = "/opt/susvd/susv"

  # get the full name of the calling script
  file = re.search( ".*_(.*)", sys.argv[0] )

  if file:
    value_group = file.group(1)

  for opt in argv:
    # output the configuration data
    if opt == 'config':
      if value_group == 'currents':
        print "graph_title susv Currents"
        print "graph_vlabel mA"
        print "graph_category sensors"
        print "battery_current.label Battery Current"
        print "input_current.label Input Current"

      elif value_group == 'voltages':
        print "graph_category sensors"
        print "graph_title susv Voltages"
        print "graph_vlabel V"
        print "battery_voltage.label Battery Voltage"
        print "external_voltage.label Input Voltage"

      elif value_group == 'battery':
        print "graph_category sensors"
        print "graph_title susv Battery Capacity"
        print "graph_vlabel %"
        print "graph_args -l 0"
        print "graph_scale no"
        print "battery_capacity.warning 20:"
        print "battery_capacity.label Battery Capacity"

      sys.exit()

    # output the suggestions for symlink names
    elif opt == 'suggest':
      print "currents"
      print "voltages"
      print "battery"
      sys.exit()

    # autoconf information
    elif opt == 'autoconf':
      if os.path.isfile(susv_executable):
        print "yes"
      else:
        print "no ( " + susv_executable + " not found )"
      sys.exit()

  # otherwise output the data depending on the script symlink name
  if value_group == 'battery':
    p = subprocess.Popen([susv_executable, "-capbat", "0"], stdout=subprocess.PIPE)
    out, err = p.communicate()
    batdata = out.splitlines()

    print "battery_capacity.value " + batdata[0]

  elif value_group == 'voltages':
    p = subprocess.Popen([susv_executable, "-capbat", "0"], stdout=subprocess.PIPE)
    out, err = p.communicate()
    batdata = out.splitlines()

    p = subprocess.Popen([susv_executable, "-vin", "0"], stdout=subprocess.PIPE)
    out, err = p.communicate()
    voltext = out.splitlines()

    print "external_voltage.value " + voltext[0]

  elif value_group == 'currents':
    p = subprocess.Popen([susv_executable, "-pwrbat", "0"], stdout=subprocess.PIPE)
    out, err = p.communicate()
    pwrbat = out.splitlines()

    p = subprocess.Popen([susv_executable, "-pwrext", "0"], stdout=subprocess.PIPE)
    out, err = p.communicate()
    pwrext = out.splitlines()

    print "input_current.value " + pwrext[0]
    print "battery_current.value " + pwrbat[0]

  sys.exit()

if __name__ == "__main__":
   main(sys.argv[1:])
